#! usr/bin/env python3
from tkinter.constants import *
import tkinter

class TicTacToe():
    """
    GUI Tic Tac Toe game. The board consists of Tkinter widgets (buttons, text boxes, etc.).
    The logic is generated by simple methods.
    """
    
    def __init__(self):
        """
        Constructor for the game. Calls other methods which set up 
        the GUI interface, as well as logic controlling methods.
        """
        self.makeGui()
    
    def makeGui(self):
        """
        Method for the GUI. Involves creating windows, buttons,
        as well as the placement and styling of them.
        """
        self.root = tkinter.Tk()
        self.root.title('Tic Tac Toe!')
        
        # Frame is a child container of root, and allows for geometry management.
        # For more info see http://effbot.org/tkinterbook/frame.htm
        self.frame = tkinter.Frame(self.root, bg = 'red')     # Changes color of Frame
        self.frame.pack(fill = BOTH, expand = True)           # When window is resized, so is Frame
        
        # Buttons named from top left to top right: '00', '01', '02'
        # middle left to middle right: '10', '11' etc...
        self.buttons = {'00': tkinter.Button(self.frame, text = '', command = self.move),
                        '01': tkinter.Button(self.frame, text = '', command = self.move),
                        '02': tkinter.Button(self.frame, text = '', command = self.move),
                        '10': tkinter.Button(self.frame, text = '', command = self.move),
                        '11': tkinter.Button(self.frame, text = '', command = self.move),
                        '12': tkinter.Button(self.frame, text = '', command = self.move),
                        '20': tkinter.Button(self.frame, text = '', command = self.move),
                        '21': tkinter.Button(self.frame, text = '', command = self.move),
                        '22': tkinter.Button(self.frame, text = '', command = self.move)}
        # Placement of buttons              
        for key in self.buttons:
            self.buttons[key].grid(row = int(key[0]), column = int(key[1]), sticky = NSEW)
        
        # Make widgets spread out to fill screen when window is resized.
        # `Weight` is a measure of how much a container expands when it's
        # parent container is resized (normalized to 1).
        self.root.rowconfigure(0, weight = 1)
        self.root.columnconfigure(0, weight = 1)
        for row in range(0,3):
            self.frame.rowconfigure(row, weight = 1)
        for column in range(0,3):
            self.frame.columnconfigure(column, weight = 1)    
        
        # Main loop to listen for user input (events)
        self.root.mainloop()
    
    def move(self):
        '''for player moves'''
        pass

startGame = TicTacToe()
        
